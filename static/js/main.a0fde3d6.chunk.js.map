{"version":3,"sources":["logo.svg","Header.js","Generator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","alt","Generator","state","topText","bottomText","randomImage","allImages","handleClick","bind","handleChange","fetch","then","response","json","memes","data","setState","this","random","Math","floor","length","url","event","target","name","value","className","placeholder","type","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,kC,4GCgB5BC,MAdf,WACC,OACC,gCACC,6BACC,yBACCC,IAAI,8EACJC,IAAI,aAEL,iD,iDC6DWC,E,YApEd,aAAc,IAAD,8BACZ,+CACKC,MAAQ,CACZC,QAAS,GACTC,WAAY,GACZC,YAAa,gCACbC,UAAW,IAEZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATR,E,iFAYO,IAAD,OAClBE,MAAM,qCACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACXE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CACbV,UAAWQ,S,oCAMdG,KAAKD,UAAS,SAACd,GACd,IAAIgB,EAASC,KAAKC,MAAMD,KAAKD,SAAShB,EAAMI,UAAUe,QACtD,MAAO,CAAChB,YAAaH,EAAMI,UAAUY,GAAQI,U,mCAIlCC,GAAO,IAAD,EACIA,EAAMC,OAArBC,EADW,EACXA,KAAMC,EADK,EACLA,MACbT,KAAKD,SAAL,eAAgBS,EAAOC,M,+BAIvB,OACC,yBAAKC,UAAY,WAChB,8BACC,2BACCC,YAAY,WACZC,KAAK,OACLJ,KAAK,UACLC,MAAOT,KAAKf,MAAMC,QAClB2B,SAAUb,KAAKR,eAEhB,2BACCmB,YAAY,cACZC,KAAK,OACLJ,KAAK,aACLC,MAAOT,KAAKf,MAAME,WAClB0B,SAAUb,KAAKR,gBAGjB,4BAAQsB,QAASd,KAAKV,aAAtB,YACA,yBAAKoB,UAAU,QACd,yBACC5B,IAAOkB,KAAKf,MAAMG,YAClBL,IAAM,aAEP,wBAAI2B,UAAU,WAAWV,KAAKf,MAAMC,SACpC,wBAAIwB,UAAU,cAAcV,KAAKf,MAAME,kB,GA9DpB4B,aCaTC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.a0fde3d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nfunction Header(){\r\n\treturn(\r\n\t\t<header>\r\n\t\t\t<div>\r\n\t\t\t\t<img \r\n\t\t\t\t\tsrc=\"http://www.pngall.com/wp-content/uploads/2016/03/Mother-Of-God-Meme-PNG.png\"\r\n\t\t\t\t\talt=\"problem?\"\r\n\t\t\t\t/>\r\n\t\t\t\t<h1>Meme Generator</h1>\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react'\r\n\r\nclass Generator extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\ttopText: \"\",\r\n\t\t\tbottomText: \"\",\r\n\t\t\trandomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n\t\t\tallImages: []\r\n\t\t};\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://api.imgflip.com/get_memes\")\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tconst {memes} = response.data;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tallImages: memes,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}\r\n\r\n\thandleClick(){\r\n\t\tthis.setState((state) => {\r\n\t\t\tlet random = Math.floor(Math.random()*state.allImages.length);\r\n\t\t\treturn {randomImage: state.allImages[random].url}\r\n\t\t})\r\n\t}\r\n\r\n\thandleChange(event){\r\n\t\tconst {name, value} = event.target;\r\n\t\tthis.setState({[name]: value});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className = \"wrapper\">\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tplaceholder=\"Top Text\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"topText\"\r\n\t\t\t\t\t\tvalue={this.state.topText}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tplaceholder=\"Bottom Text\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"bottomText\"\r\n\t\t\t\t\t\tvalue={this.state.bottomText}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form>\r\n\t\t\t\t<button onClick={this.handleClick}>GENERATE</button>\r\n\t\t\t\t<div className=\"meme\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc = {this.state.randomImage}\r\n\t\t\t\t\t\talt = \"problem?\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<h3 className=\"topText\">{this.state.topText}</h3>\r\n\t\t\t\t\t<h3 className=\"bottomText\">{this.state.bottomText}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Generator;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Header.js'\nimport Generator from './Generator.js'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Generator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}